[{"content":"My view of being a Software Engineer TLDR Started coding 13 years ago, struggled with basics but stayed determined. First success automating SAP exports, igniting my love for coding. Consulting role led to Open UI expertise and rapid career growth. Freelanced, shifting to full-stack and gaining global experience. Tried YouTube and a Flutter travel app, but plans changed due to COVID. Worked on EV tech at Sono Motors, gaining real-world integration skills. Now thriving on a Flutter team at Sevdesk with strong leadership. Evolved from coder to solution designer, focused on impactful solutions. From Struggle to Breakthrough I would now call myself Software Engineer after around 13 years. I started like everyone else and struggled with even the easiest tasks, and I really felt doomed that I would never be able to code a proper program. Even the easiest methods and function calls nearly killed me and made me think I would never achieve anything. After my first project, I realized that, with a lot of help from my former developer buddies, I felt like I did not really do it by myself. I tried to improve at home but hit so many roadblocks that I thought that\u0026rsquo;s it.\nI will never forget how it was when I had the task of reading an Excel export in a certain way. Likewise, I needed to order the local \u0026ldquo;Wisdom Database\u0026rdquo; and should remove all folders that did not contain anything. I started as I did as a PC user, click on the folder to delete\u0026hellip; Until I found out there are several thousands of folders. If I had continued like that, I would have continued like that and deleted folders even today. But during my first student year as a developer, it did not even strike me to create a script for that.\nAfter some conversation, a coworker helped me get back on track, but this showcases how bad my problem-solving skills have been. There was a solution, but I would not come over the first hurdle to identify the problem as a programming problem. My friend supported me to finish the script, but I felt like I still knew nothing.\nAfter that, I fought myself through 3 years of SAP ABAP, SAP Systems, Java SE (with Java Beans), and JSP without the slightest chance of understanding what I was doing there. I was not prolonged in the company, and I still do not know if it really was about my performance or because they did not need another dev, but that gave me two weeks at the end of the student time when I was able to search my own projects.\nFirst Taste of Success I was talking a lot at that time a lot with our product people, and found out that they had an issue with a SAP export that needed to be exported in a certain way. First, I did it manually, but I thought if the PM would need that regularly, maybe I could automate it. It was an epiphany for me at that time. Not only did I understand the problem, but I was also able to conclude that we can easily automate that. And I had two weeks to complete it, so I sat down. Every day as long as I had time, and for the first time ever, I enjoyed my time writing code. Reading through the CSV package helped me understand how to get data from an Excel spreadsheet and reorganize it into a new file the way I wanted it. I felt great!\nBut the best part was that the product manager took the tool, used it and said something that was like knighthood.\nYou are also such a hacker, right?\nI was so surprised, because it really did not feel that way. I was just coding, enjoying my time and creating something useful. Somehow, after that day, programming never felt like a burden again. I was able to create stuff, understand how to Google things, and learn how to read Stack Overflow. Documentation became clear, understandable and manageable. Still, there have been problems I did not understand, but hey, great that it works for me.\nGrowing Through Professional Challenges My next big step was to join a consulting company, and oh boy, that was quite tough. I was a Frontend developer and had no idea what people would expect from me. In the interview, I got tortured with MySQL Database Query questions. Databases was the only subject I had really screwed up during university, and I even got a second chance for the interview because I did not wear a suit during the interview. And in the second interview, they again tortured me with SQL, but somehow I got the job anyway. I heard later that I was really close to not getting in from HR.\nFrom here, I learned a lot of strange things in the beginning. I needed to make a certificate for the Oracle SOA Suite A tool that was just a pain to use, it crashed all the time, was huge to install, and had a manual that was just massive. So I did what every good consultant did and got me a Cheat sheet with all the answers and tried to learn only that and make my certification. After the second attempt, I really got it. Which surprised me quite a lot, but that was great. Luckily, there was a change of plans.\nWe got a new contract in Switzerland, and they needed someone who works with [Oracle Siebel CRM] in a brand-new technology. The new technology was Open UIÂ and was a UI update that was super important because Siebel at that time still relied on ActiveX Elements in Internet Explorer 8, and Oracle paid a massive amount of money to just keep the IE8 support up for their customers. It allowed you to use JavaScript inside the browser and write scripts that were executed on Web Forms you defined. So they invented that new Open UI, which was quite nice, and today, when I understand a bit more, is actually a nice abstraction of the stuff they do in the background.\nDiscovering My Technical Identity So they showed me a screenshot, gave me a short intro into how Siebel CRM works, and with my limited knowledge, I scripted away. I did not really know how this Siebel was working, just that the old forms needed to go away, so I just quickly removed everything on the screen. I wrote everything new - the whole view. There was nothing left from the old form, only hidden elements I needed to press under specific circumstances. Today, I know that was not really intended by the creator. But hey, for the project, I was fantastic with the time plan. After two days and a lot of jQuery (which is included in Open UI), I was able to recreate the whole screenshot, which pushed me from a guy who does not know anything to THE EXPERT in the company about Open UI.\nSuddenly I got contracts, traveled a lot and supported and helped tons of customers about the topic. I had the chance to even launch the new UI for one of the biggest companies in Switzerland. I also created my first library and was invited to the Oracle Open World in San Francisco, my very first public talk that I held. Not only that, but I was quickly moving up the career ranks from Junior Consultant to Senior Consultant within three years. In the last year, I switched my focus from Open UI to a real Full Stack development project because I gained some skills during that time as an Angular Developer. Here, I switched my focus from pure Frontend development to being a Full Stack developer after a college told me:\nYou cannot run away from the responsibility, it is our tool, and it needs to work. Backend or frontend, we need to fix it, and you should also know how it works.\nThat was again a key moment in my life, because it made me realize that it does not matter if my stuff is working, it all needs to work. UI Elements, API calls, Smoke Tests, Pipelines but also Meetings, Project Management, Company Politics. One of my friends who was a freelancer told me that she hates the term \u0026ldquo;Developer\u0026rdquo; she is a \u0026ldquo;Solution Designer\u0026rdquo; and that stuck with me. I am a Solution Designer, finding problems, seeing how to automate them, and then trying my best to execute. That does not only mean to develop but also to convince people of my solutions, unblock my team from impediments, make a SCRUM master if it is necessary, and so much more. People would call me the girl for everything, and they would probably be right.\nEmbracing the Freelance Journey After a while, I started to freelance and left the company. Which got me in huge trouble and got sentences to hear from my bosses like \u0026ldquo;I will crush you with my network\u0026rdquo;\u0026hellip; I was really, really happy to leave the company after that, and I started to travel. Which led me to a year in New Zealand, where I was able to work for an American company. Here, I could really flourish. I started as an Angular developer but was able to support and work on an anti-corruption layer. I learned how to code in C# and understood that programming languages are way more similar than I thought. One of the most valuable lessons I learned here is that work is not everything. Because the team was fantastic, and they had a massive integration of their external workers like me as a freelancer.\nBut also I was also involved knee-deep in everything surrounding the company, from CI / CD processes to release tasks, organizing meetings, and writing documentation. Besides delivering code and writing Angular at that time, I loved it there and even got a job offer, which I nearly took but decided against for my family. Which let to a cumbersome time. In that time I thought it would be a great idea to start my YouTube Career, not only teaching my wife every day some new tricks on Flutter, but also explain it to a wider audience was the goal.\nPursuing Entrepreneurial Dreams Together Back home, everything took again quite a turn. My wife and I wanted to become freelancing and create our own app, \u0026ldquo;World Travel Companion\u0026rdquo;, but as always, fate had some other ideas. We started to develop the app, but it was in late 2019, which was the year of the Coronavirus, and we were not crazy enough to just create an app that would not be used for the unforeseeable future. Even though we had some money on the side, we had real struggles to get a flat in Germany because security is everything here. No job, â No house, \u0026hellip; very bad living here. And YouTube did not get me any money we could live from.\nSo we started the job hunt, and I found a fantastic project at a finance company in Germany, which led to one of the weirdest issues ever. I had too many different industries in my portfolio. I was working for Telco, Health, Finance and even insurance companies. They created a new project and hired consultants to support them by architecting the newest company software architecture, which was quite an impressive step for me and a really great learning experience. After a while, I thought to let them hire me. When considering the finance company role, I realized that while the technical aspects excited me, I hadn\u0026rsquo;t yet developed a deep connection to the finance industry\u0026rsquo;s impact.\nFinding Purpose Through Technology So I searched for something meaningful that I could support. And there was a company that I heard a lot about, and that I felt like I wanted to support their mission, Sono Motors, an electric vehicle that should drive with the power of the sun. And it was a blast of a project, it was a startup, so they searched people in every direction with all skills. Whatever you can do, you should do it. I was able to work with React Native on the mobile app, but I also had the chance to create Vehicle Integration stuff. That was my first project where I could see a real-world application of the stuff I am writing, pressing a button in my app opens the door. WOW!\nBut sadly, the dream busted, and the company went bankrupt.\nLanding at My Current Home During my time as a freelancer and while I was working on Flutter Explained, I needed to somehow do my taxes. Therefore, I used a tool called sevdesk a friend of mine told me that they are currently creating a Flutter Team, and I would be a perfect fit, so I decided to apply for the job. And voilÃ , now I am here. I love to work here at the moment. There are a lot of things I need to learn and even more things we need to improve, but it feels fantastic to be here at the moment. The leadership so far looks promising, and my coworkers are fantastic. I will keep you up-to-date on what my future journey will look like :).\nReflections and Future Outlook I still love programming, I still enjoy it. Even though there are voices saying that AI will take it away and abstract it, I still have a blast discussing with ChatGPT better solutions. I am also finding an incredible joy in working with pipelines and pushing the running times as low as possible. I learned that being a Software Engineer is more than just writing code. Teaching others, finding problems to solve, and explaining why your tasks are important are really as important. I really hope that this short story about my career path will give you some insights and maybe help you in your way.\n","permalink":"https://flutter-explained.dev/posts/personal_dev_story/","summary":"\u003ch1 id=\"my-view-of-being-a-software-engineer\"\u003eMy view of being a Software Engineer\u003c/h1\u003e\n\u003ch2 id=\"tldr\"\u003eTLDR\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eStarted coding 13 years ago, struggled with basics but stayed determined.\u003c/li\u003e\n\u003cli\u003eFirst success automating SAP exports, igniting my love for coding.\u003c/li\u003e\n\u003cli\u003eConsulting role led to Open UI expertise and rapid career growth.\u003c/li\u003e\n\u003cli\u003eFreelanced, shifting to full-stack and gaining global experience.\u003c/li\u003e\n\u003cli\u003eTried YouTube and a Flutter travel app, but plans changed due to COVID.\u003c/li\u003e\n\u003cli\u003eWorked on EV tech at Sono Motors, gaining real-world integration skills.\u003c/li\u003e\n\u003cli\u003eNow thriving on a Flutter team at Sevdesk with strong leadership.\u003c/li\u003e\n\u003cli\u003eEvolved from coder to solution designer, focused on impactful solutions.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"from-struggle-to-breakthrough\"\u003eFrom Struggle to Breakthrough\u003c/h2\u003e\n\u003cp\u003eI would now call myself Software Engineer after around 13 years. I started like everyone else and struggled with even the easiest tasks, and I really felt doomed that I would never be able to code a proper program. Even the easiest methods and function calls nearly killed me and made me think I would never achieve anything. After my first project, I realized that, with a lot of help from my former developer buddies, I felt like I did not really do it by myself. I tried to improve at home but hit so many roadblocks that I thought that\u0026rsquo;s it.\u003c/p\u003e","title":"My personal career path"},{"content":"We already covered in another Article what an HTTP call is and how it works in a Client - Server Architecture. But today, we want to look at how to keep a connection open between the Client and the server to implement a Real-Time Application.\nWhy do we need Sockets But what would Sockets benefit be compared to the standard HTTP Request Response method? In modern applications, we want real-time data, and who thinks now at Firebase Store etc. is correct because that is how they do it.\nBefore we had the benefit of WebSockets or Sockets, we had to wait until the server finished a task and make another request to get the data. Because the server never told us we were ready with the new data. Therefore, developers all around the world discovered some quite exciting workarounds like Pooling. At Polling, a client made a request every period (200+ ms) to check if there were new data present. Thanks to WebSockets and Sockets, we have the chance to reduce a load of our servers because we can reduce the calls needed. Furthermore, the server can directly notify the Client of the new information. Real-Time applications are born.\nSockets vs. WebSockets At the beginning of my journey, I tried to use Shelf_WebSockets and connect with my two Terminals, and the result was nothing. Interestingly, I could connect via the terminal clients to the server, but whenever I sent a message, it was just not visible, and the server did not show anything.\nAfter a long time of learning and debugging, I discovered that my Terminal used dart:io and needed a server to work with the same TCP Sockets. Unfortunately, while the WebSocket Server allowed the connections, it could not understand the messages the Terminals tried to send.\nWhy is that the case? WebSockets are upgraded HTTP request that allows the open connection between a client and a server. However, WebSockets are usually used to connect from a Browser or a UI to the server, making it problematic. Some packages allow Terminals to connect against a WebSocket server, but I did not use them. Therefore I needed to change my WebSocket Server to a TCP Socket Server.\nSo the rest of the tutorial will only use a Socket Server and Socket Clients. Still, you can achieve the same with WebSocket Server and a WebSocket Client, for example, websocket_manager that allows Flutter to connect against a WebSocket Server.\nIf you want to know more about Sockets vs WebSockets, I recommend reading the MDN post about WebSockets and the StackOverflow answer. Great, now that we have that out of the way, let\u0026rsquo;s see how we can develop our application.\nImplementation We will now see the best part of the implementation is that we do not rely on any package. To make this possible default dart is enough to make it work, which is incredible. The only package I added is optional and is called ansicolor and allows to make prints in the console a bit more colourful.\nI created a basic barebone Dart project without anything inside but a terminal executable. After all, we do not need the boilerplate from the Server app because we want to use Sockets :).\nNow I deleted everything in the bin folder and created three files client.dart, server.dart and terminal_service.dart. In the Client.dart, we will collect all information about the Client, how he connects to the server and the message he sends. In the end, we can start multiple clients against a single server. The second file is the server.dart inside here, we write everything to receive messages from multiple clients and notify all clients that there something new happens.\nLast but not least, we have the terminal_service.dart is just a mini service containing different print functions for different colours. The result after the tutorial will look something like this.\nSetup the Server First, we start as always within the main function. Inside here, we want to find the local IP address and allow us to find just an unused IP address. Then we create a ServerSocket and bind the IP and a port. In our case, the port is fixated on 3000. after that, we just let the server listen to incoming connections, so whenever someone connects to the server, the callback is in the server.listen(callback) will be executed.\nFuture\u0026lt;void\u0026gt; main() async { final ip = InternetAddress.anyIPv4; final server = await ServerSocket.bind(ip, 3000); print(\u0026#34;Server is running on: ${ip.address}:3000\u0026#34;); server.listen((Socket client) { handleConnection(client); }); } Whenever a client is connecting to our server, we call handleConnection. Inside, we want to inform the server of an incoming connection. The socket we receive in the handleConnection is the information on communicating to that specific Client. If you want, for example, to create multiple players, you can save that socket to have a reference between player and socket to send messages between specific players. Now we must listen to the Client if the Client sends the server some messages.\nList\u0026lt;Socket\u0026gt; clients = []; void handleConnection(Socket client) { printGreen( \u0026#34;Server: Connection from ${client.remoteAddress.address}:${client.remotePort}\u0026#34;, ); client.listen( ... ); } Before, we already had the server.listenwhere the server waited for connections. Now we haveclient.listen, so we on the server wait for the client to send us some notifications. The client.listenfunction has some information we have to pass in. The first part is how to handle messages from the Client. So we will receive a Uint8List message that is just a basic ByteString, and because we will be in complete control of the Client, we know that this will be a plain string so that we can transcode it withString.fromCharCodes(data).\nIn that message, we want our users to send the player name so we can inform every Client that is already connected to the server.\nclient.listen( (Uint8List data) async { final message = String.fromCharCodes(data); for(final c in clients) { c.write(\\\u0026#34;Server: $message joined the party!\\\u0026#34;); } clients.add(client); client.write(\\\u0026#34;Server: You are logged in as: $message\\\u0026#34;); }, onError: ... onDone: ... ... ) Implement the Client First, we create another file called client.dart in our Dart Project. Here we will implement the client application that will connect to our server. The Client works similar to the server and should be a standalone Dart application. Therefore, we need another main function. In this main function, we connect with a Socket to our server with the IP we get from the server command:\nFuture\u0026lt;void\u0026gt; main(){ final socket = await Socket.connect(\u0026#34;0.0.0.0\u0026#34;, 3000); print(\u0026#39;Connected to ${socket.remoteAddress.address}:${socket.remotePort}\u0026#39;); } When we execute the client.dart file without anything further, we will already get the information on our Terminal where the server is running. It should look something like this.\nâ dart ./bin/client.dart Connected to: 127.0.0.1:3000 â dart ./bin/server.dart Server is running on: 0.0.0.0:3000 Server: Connection from 127.0.0.1:53419 Therefore we can see that the server already receives the connection and keeps the connection open for the IP 127.0.0.1:53419. The IP points are also the same computer, but the IP and the Port could be entirely different for your implementation. Great, so the connection is already stable so let\u0026rsquo;s send some messages from the Client to the server and see how we can handle them. We will ask the user for his name and send the information to the server.\n// Ask user for its username String? username; do { print(\u0026#34;Client: Please enter your username\u0026#34;); username = stdin.readLineSync(); } while (username == null || username.isEmpty); socket.write(username); We first define a variable username that could be null, and in the do-while-loop, we ask the user for a terminal input to enter the username. If the username is null or empty, we ask him again until we get the needed information. After that, we call socket.write(username), which sends the information directly to the server. But if we restart the server and the Client now, we will see nothing has changed. The message is now only sent to the server; if we recheck the server, we see that we send the message to the Client.\nclient.write(\u0026quot;Server: You are logged in as: $message\u0026quot;);\nOn the other hand, the Client does not listen to server messages and cannot show what the server sends. So let us make the Client smarter and allow it to receive messages sent by the server.\nsocket.listen( (Uint8List data) { final serverResponse = String.fromCharCodes(data); printGreen(\\\u0026#34;Client $serverResponse\\\u0026#34;); }, onError: (error) { print(\u0026#34;Client: $error\u0026#34;); socket.destroy(); }, onDone: () { print(\u0026#39;Client: Server left.\u0026#39;); socket.destroy(); }, ); ` If we check the socket, we can see that it also provides the `listen` method and also here, we have the chance to implement the same three methods as on the Server side. Therefore we implemented them nearly the same. The only difference is that the onData method now receives the message and directly prints them into the console. If we start up now the Server and Client, we should be able to see something like this: ```ssh â dart ./bin/server.dart Server is running on: 0.0.0.0:3000 Server: Connection from 127.0.0.1:54384 â dart ./bin/client.dart Server: Connected to: 127.0.0.1:3000 Client: Please enter your username Max Client Server: You are logged in as: Max And if we create another client the following will happen:\nâ dart ./bin/client.dart Server: Connected to: 127.0.0.1:3000 Client: Please enter your username Mahtab Client Server: You are logged in as: Mahtab â dart ./bin/client.dart Server: Connected to: 127.0.0.1:3000 Client: Please enter your username Max Client Server: You are logged in as: Max Client Server: Mahtab joined the party! â dart ./bin/server.dart Server is running on: 0.0.0.0:3000 Server: Connection from 127.0.0.1:54384 Server: Connection from 127.0.0.1:54415 Conclusion We now have a successful Socket Server running and multiple clients connected. After this tutorial, you should have the power to create excellent applications that need real-time experience. That can be integrated with Games but also in Tools where collaboration is vital. You can find the tutorial project on Codeberg. Feel free to check it out, and if there are any thoughts, please let us know. Thanks for reading, and till the next post.\n","permalink":"https://flutter-explained.dev/posts/a-terminal-real-time-application-with-dart-sockets/","summary":"\u003cp\u003eWe already covered in another \u003ca href=\"https://flutter-explained.dev/deploy-dart-server-on-heroku\"\u003eArticle\u003c/a\u003e what an HTTP call is and how it works in a Client - Server Architecture. But today, we want to look at how to keep a connection open between the Client and the server to implement a Real-Time Application.\u003c/p\u003e\n\n\n    \n    \u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\"\u003e\n      \u003ciframe allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"allowfullscreen\" loading=\"eager\" referrerpolicy=\"strict-origin-when-cross-origin\" src=\"https://www.youtube-nocookie.com/embed/cpEYw8HuoxI?autoplay=0\u0026controls=1\u0026end=0\u0026loop=0\u0026mute=0\u0026start=0\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\" title=\"YouTube video\"\n      \u003e\u003c/iframe\u003e\n    \u003c/div\u003e\n\n\u003ch2 id=\"why-do-we-need-sockets\"\u003eWhy do we need Sockets\u003c/h2\u003e\n\u003cp\u003eBut what would Sockets benefit be compared to the standard HTTP Request Response method? In modern applications, we want real-time data, and who thinks now at Firebase Store etc. is correct because that is how they do it.\u003c/p\u003e","title":"A terminal real time application with Dart Sockets"},{"content":"Running the first server is a fantastic experience for every developer.\nIt gives you many options and possibilities and improves your general understanding of software engineering. After we learned in my previous videos already how to start a server locally, we want in this article to learn how to make our services available on the world wide web so that you can access them from every device.\nDeployment Software deployment includes all activities that make a software system available to use. - Wikipedia\nIn our use case, we want to access our server from every device connected to the Internet and not only our local device in front of us. In professional teams, that task is automated in most cases and transforms\nquickly. Into continuous deployment where you work on your code, push to a repository, and the deployment gets automatically triggered. But in smaller teams or smaller organizations, the preferred way is usually for a skilled professional to perform that task. And because we are skilled professionals, we do exactly that today.\nPrerequisites We have to prepare just a few things to get started in the beautiful world of deployment. The first thing that we need is a physical server that will run our software server :). For this reason, we will use Heroku, because it allows us to run our software for free in a small server Virtual Machine (VM) that we can scale up if we want.\nWe also need a software service that we already built in the videos mentioned above. The service we want to deploy will use the shelf server from Dart that we already run locally and make our first requests. But this will also work if you use a aqueduct server or a conduit server.\nSummary of what we need today:\nHeroku Account\nRunning Software Server\nNo previous knowledge about deployment processes\nGetting started After you successfully create an account on Heroku, you will probably see a page that welcomes you to Heroku. From here, you could also create a new app, but we will do it with the Heroku CLI.\nHeroku CLI Now that we have that covered let us jump right into it. To begin our journey to deploy something on Heroku, we need to install the Heroku CLI. Then, check out the link of the Heroku CLI and select the system that fits your operating system.\nGreat, the Heroku CLI will help us deploy our Server to the Heroku server. After the installation, we first have to login against the Heroku system. For that, execute Heroku login in your terminal. After executing the command, your default web browser will open and allow you to log in to Heroku.\nCreate a new Heroku app The most convenient way to create a new Heroku app is via the CLI. For that, open a terminal and navigate to your workspace in which your project is. In our example, it will be in ~/dev/dart-server. Now we want to create our app. We execute Heroku create \u0026lt;name-of-your-app\u0026gt; in our example. We call the app fe-dart-server. If you do not pass a name,\nit will create a random app name for you.\nheroku create fe-dart-server Creating â¬¢ fe-dart-server... done https://fe-dart-server.herokuapp.com/ | https://git.heroku.com/fe-dart-server.git As a result, Heroku delivers us two URLs. The first one is the URL directly to our app. Currently, we do not have an application running on https://fe-dart-server.herokuapp.com/.Therefore, you will find the documentation link of Heroku if you open it. The second link is the internal git server of Heroku, from which it will use your source code to build the project. We will need to add a new remote to git to push our Dart project.\n# If you have not initialized your project with git git init git add remote heroku https://git.heroku.com/fe-dart-server.git ** Hint: It could be that if your project was already in git, it was already added with the Heroku create command**\nNow that your app is registered to Heroku, we have to set up a buildpack.\nHow Heroku works Now it is essential to know how Heroku works. A build pack is responsible for transforming your deployed source code into a slug, which can then be executed by a dyno. You can read more about how Heroku works here. So before we go deeper into the topic, let\u0026rsquo;s quickly check what a slug and a dyno are.\nA slug is a bundle of your source, fetched dependencies, the language runtime, and compiled/generated output of the build system - ready for execution.\nDynos are isolated, virtualized Unix containers that provide the environment required to run an application.\nSource: devcenter.heroku.com\nSet up a build pack for Dart Unfortunately, Heroku is not yet supporting Dart with an official build pack. Therefore, we have to take advantage of the fantastic Dart \u0026amp; Flutter Community, which has created already a build pack that we can use. We will use in this tutorial the most starred build pack by igrigorik.\nTo use the build pack, we will have to tell Heroku to use a specific download URL for the Dart language and configure the build pack we want to use. To find a Dart SDK URL, we check the Dart Archive page. Then, we select Linux and the version we would like to install. This example case is version 2.16.2`, which is the current version. Now right, click on Dart SDK and copy the link address. We will need it in a second.\nNow it is time to set the Dart URL and our BUILDPACK_URLfor our Heroku app by executing in our terminal.\nheroku config:set DART_SDK_URL=https://storage.googleapis.com/dart-archive/channels/stable/release/2.16.2/sdk/dartsdk-linux-x64-release.zip Setting DART_SDK_URL and restarting â¬¢ fe-dart-server... done, v3 DART_SDK_URL: https://storage.googleapis.com/dart-archive/channels/stable/release/2.16.2/sdk/dartsdk-linux-x64-release.zip heroku config:add BUILDPACK_URL=https://github.com/igrigorik/heroku-buildpack-dart.git Setting BUILDPACK_URL and restarting â¬¢ fe-dart-server... done, v4 BUILDPACK_URL: https://github.com/igrigorik/heroku-buildpack-dart.git Now it is time to push our source code to Heroku by pushing our source code to the remote git that we got when we created our Heroku app.\ngit add . # Adds all files to git in this repository git push --set-upstream heroku main # Sets the upstream branch to heroku main and pushes all files If you are doing it in the terminal, Heroku will give you a lot of logging information about the build process.\nremote: -----\u0026gt; Discovering process types remote: Procfile declares types -\u0026gt; (none) remote: remote: -----\u0026gt; Compressing... remote: Done: 195.9M remote: -----\u0026gt; Launching... remote: Released v7 remote: https://fe-dart-server.herokuapp.com/ deployed to Heroku remote: remote: Verifying deploy... done. To https://git.heroku.com/fe-dart-server.git \\trefs/heads/main:refs/heads/main\\t75c0e7f..b4f1198 Done The log above tells us that everything was successful, but one step is missing. First, we need to declare the dynos we want for our app. For that, we need to create aProcfilein the root directory of our project. Then, we enter the dyno and what it should start to execute our server. In our case, we execute thedart_server.dartin the bin folder.\nweb: ./dart-sdk/bin/dart bin/dart_server.dart Hint: The Procfile does not have a file extension like.txtor.js.\nIf we now commit and push again to the Heroku git server we are ready to see our server in action.\ngit commit -m \\\u0026#34;Added Procfile to setup the dyno\\\u0026#34; git push --set-upstream heroku main ð Great, if everything worked well, you should have now your first running Dart Server on Heroku.\nTroubleshooting As always, some things could go wrong, and I try to add a collection that we found out during our live stream.\nDynamic Port Heroku does not provide you static port, so you will get a new port every time the instance is started. Especially in the free plan, that happens pretty frequently and therefore, you must take the PORT provided by the\nEnvironment variablesof Heroku.\nvar env = Platform.environment; var port = env.entries.firstWhere((element) =\u0026gt; element.key == \u0026#39;PORT\u0026#39;, orElse: () =\u0026gt; MapEntry(\u0026#39;PORT\u0026#39;, \u0026#39;8080\u0026#39;)); var server = await shelf_io.serve( logRequests().addHandler(router), \u0026#39;0.0.0.0\u0026#39;, int.parse(port.value)); Replace localhost with 0.0.0.0 Heroku is pointing to itself while setup a server you will need to changelocalhost to 0.0.0.0\nvar server = await shelf_io.serve( logRequests().addHandler(router), \u0026#39;0.0.0.0\u0026#39;, int.parse(port.value)); Wrapping up Great, we did it. With these steps, we published our server to Heroku and made our very first deployment possible. The next milestone is to create a helpful app out of this server. We were maybe starting with a small quiz app that allows you and your friends to learn more about development. For that, you will probably need more insights into the shelf_router package or an even bigger solution like Conduit. Feel free to share your first examples with me on Twitter with the Hashtag #FlutterExplained. I cannot wait to see your results!\n","permalink":"https://flutter-explained.dev/posts/deploy-dart-server-on-heroku/","summary":"\u003cp\u003eRunning the first server is a fantastic experience for every developer.\u003c/p\u003e\n\u003cp\u003eIt gives you many options and possibilities and improves your general understanding of software engineering. After we learned in my previous \u003ca href=\"https://www.youtube.com/watch?v=kYM-wlOhQ3I\u0026amp;list=PLq83k-ITj6lQuw6asmdEbuNCV6vVwqT5c\"\u003evideos\u003c/a\u003e already how to start a server locally, we want in this article to learn how to make our services available on the world wide web so that you can access them from every device.\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003ch2 id=\"deployment\"\u003eDeployment\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eSoftware deployment includes all activities that make a software system available to use. - \u003ca href=\"https://en.wikipedia.org/wiki/Software_deployment\"\u003eWikipedia\u003c/a\u003e\u003c/p\u003e","title":"Deployment of a Dart Server on Heroku"},{"content":"Setup Code Linting for a Flutter project In the beginning, let me say that additional Linting in Flutter is a controversial topic. On one side, many love code linting, because it allows us to focus on crucial parts of our code. However, some people are not fond of it because it restricts them and leads to false build errors. But before we start the discussion, let us begin with what code linting is and how we can use its full potential.\nCode Linting is an automated verification that your code is correct. There is always a Linter that we all use in our day to day work. In editors like VSCode and Android Studio, we receive errors when our code is not unnable.\nThe visualisation of build errors are already features of our Linter. This integrated Code Linter is a tool that checks your code for build problems, that means you would not even be possible to run your application. We do not have to search for errors in our code, and when everything is green, we are sure that our code is executable.\nThanks to modern tools, we can extend these rules and check our current project for more than just broken code. For example, we can tell our Linter that we want to check for wrong code styling. In Dart and Flutter the additional lint rules are managed by a file called analysis_options.yaml. If you have never heard about a yaml file extension, it is just a convenient way to structure a file that allows you to create tree structures with two spaces. Feel free to read more about the .yaml file extension here.\nOur Mission: Enforce single quotes in our project Let us assume we would force all our developers to work on our project,\nthat every string should be done with a single quote. Our IDE should show it immediately, like in the image below.\nTo achieve that the static code analyzer of Dart and Flutter recognize that mistake, we must create an analysis_options.yaml responsible for our whole project gives our Dart analyzer instructions that run in the background and verifies our code. We can create the analysis_options in the root of our project, and most IDEâs like Android Studio or Visual Studio Code will right away understand what it needs to do with it.\nNow, letâs take a closer look into the analysis_options file. Inside of the analysis_options, we can modify the behaviour of the analyzer and the linter.\nThe Analyzer \u0026amp; Linter In our first section in the common analysis_options.yaml file is usually the analyzer. Here we can configure a more general part of how we want to check our code. Firstly, we can set up if we want to show errors, warnings, or as information for specific rules. Secondly, we can exclude files and folders from the checking system. Moreover, we can ignore specific rules. Last but not least, we have the chance to introduce additional strict type checking and experimental behaviour like no slow checks or super-mixins.\nTo use now the main information that we registered to the Analyzer, we have to specify the rules that we want to apply in our project. Therefore, we use the Linter section of the analysis_options.yaml. In the linter section, we define which rules are applied to our project. There are around 180 rules that you can specify and make them right away visible in your application. To explain, all of them would bust this blog post, so feel free to look at the list of linting rules you can specify at the Linter for Dart site.\nLinting Rules At the time I write this post, there are three different categories of Linting Rules. The first is the Error Rules, and they are possible coding errors. Secondly, we have the Style Rules that define code style matters, like a single quote or double quote. It does not hint whether your code is stable or not, but it helps align the whole codebase. The pub rules follow both. This set of rules defines how a pub package has to behave; it includes only two rules on how to name a package and sort dependencies in your pubspec.yaml.\navoid_init_to_null As the name already states with this linter rule, you do not allow anymore to initialize a variable with null. But why could this be helpful? In Dart, every variable that is not specified with a value is automatically set to null. There is no concept of empty memory or any other trap that we could fall into. With that in mind, a specific declaration of a variable to null would only bloat our code and is unnecessary and unneeded.\nuse_string_buffers Another fantastic rule that many developers are not really aware of is a more performant way to concatenate strings. The String Buffer helps you improve the concatenation of Strings and allows you to do it in the most performant way. To make sure that all contributors in your code concatenate strings efficiently, we can set the use_string_buffers style rule.\nprefer_double_quotes The prefer double quotes rule allows you to take control if you want to enforce a specific quote style. Here we prefer in our code base double quotes but also the single quote rule exists and makes it possible to enforce quote style. This is especially helpful if you work in a multilanguage team because Keyboard layouts differ from country to country. In contrast, in English and American speaking country, the single quote is easier accessible and mostly used in other countries like Germany, the double quote is usually prefered. This rule leads to clear information on how the maintainer or the owner of a package or project wants to work in general.\nThis is also the rule that we will use to finally solve our problem and enforce double quotes for the whole project.\nThe Solution Alright now that we know how the Linter and the Analyzer work lets solve our goal for this blog post, we want to enforce every developer who works on our codebase to prefer double quotes, and if they do not, we want to really show it as an error. The first thing we have to do is to define the Analyzer with the correct severity of the issue. In our case, this would be âerrorâ. Next, we just defined in the pubspec.yaml our linter with the new rule that we want to add.\nNow after we have specified the rule and the severity of the enforcement we can already see in our IDE the errors appearing.\nIf we now run dart analyze in our terminal inside our project, we receive a full analyzing report. Now we can use this command inside our terminal. If we use this command now in our CI / CD chain, the build will fail, and our team would have to fix it to merge it in our project.\nLint Rules as a package As always, there are fantastic packages that come with a predefined selection of rules that makes it easier to set up the first baseline that you want to use in your project. Let us first have a look at how we can include them in our project.\nInstall a third party linting rule set In order to add a linting rule set we have to first add the dependency to the pub.dev package in our pubspec.yaml. As an example we want to add the Lint package to our project.\nThe next step is to import the rules from the package into our analysis_options.yaml.\nAs soon as you open now the different files, you will now recognize that the packageâs linting rules are already taken into account and are ready to use. Let us assume that you do not like a rule. You can easily overwrite the behaviour by including the linter and analyzer. Your rules will overwrite the packageâs rules, with that you will always have control over the linting.\nLint Package Pascal Welsch creates the first Lint package, and it includes a baseline of lint rules for Flutter and Dart Projects. You can extend or exclude rules afterwards if you use this package, but it is created with consumers. That means if you are not necessarily working on the Flutter project. This should be your way to go.\nPedantic The second package that I want to introduce you is the so-called pedantic package. The Flutter team created the pedantic package to support a set of rules that is usually way more restrictive in terms of usage and allowances and is a bit over-engineered from time to time.\nConclusion In this post, we learned how to use the Linting Rules to our advantage and enforce rules so that every developer who collaborates with us works in the same way. To generate these rules and discuss them in a team could be tedious, and many people would say that it is not worth the effort. But if the conversation and discussion start now, you have the right tools to join the discussion and give some valuable insights.\nThank you for reading and let me know what you are thinking about Linting rules down in the description below!\n","permalink":"https://flutter-explained.dev/posts/code-analysis-and-linting-in-flutter-and-dart/","summary":"\u003ch2 id=\"setup-code-linting-for-a-flutter-project\"\u003eSetup Code Linting for a Flutter project\u003c/h2\u003e\n\u003cp\u003eIn the beginning, let me say that additional Linting in Flutter is a\ncontroversial topic. On one side, many love code linting, because it allows us\nto focus on crucial parts of our code. However, some people are not fond of it\nbecause it restricts them and leads to false build errors. But before we start\nthe discussion, let us begin with what code linting is and how we can use its\nfull potential.\u003c/p\u003e","title":"Code Analysis \u0026 Linting in Flutter and Dart"},{"content":"","permalink":"https://flutter-explained.dev/posts/top-7-flutter-packages/","summary":"","title":"Top 7 Flutter Packages"},{"content":"","permalink":"https://flutter-explained.dev/posts/firebase-hosting-for-flutter-web-projects-in-4-easy-steps/","summary":"","title":"Firebase Hosting for Flutter Web Projects in 4 easy steps"},{"content":"General Serialization Serialization is the process in computer science to convert an object into something that can be saved in a database or be sent via a network request. Today we want to transform a JSON String that we receive from an API and transform it into an instance of an object.\nTo get our Person information as a String, I will work in the following example with the Random User Generator. This can generate random user information and provides us with an API to receive a JSON String.\nBasic Network Request â Example App With the help of the RandomUserAPI, I created an application that shows us a list of users as soon as we open the app. We create this Application together in the video for a basic network request. In the video, we use the manual approach for Flutter JSON Serialization, and with this blog post, we changed that to a more automated process.\nIf you search the source code for this project and this article please you will find everything here.\nManual Flutter JSON Serialization To get a better understanding of why we should prefer automatic Flutter JSON Serialization, we have to take a step backwards. For that, we first take a look at how the manual serialization works precisely.\nclass Person { String name; String phoneNumber; String imageUrl; Person({this.name, this.phoneNumber, this.imageUrl}); Person.fromJson(Map\u0026lt;String, dynamic\u0026gt; json) : name = \u0026#39;${json[\u0026#34;name\u0026#34;][\u0026#34;title\u0026#34;]} \u0026#39; \u0026#39;${json[\u0026#34;name\u0026#34;][\u0026#34;first\u0026#34;]} \u0026#39; \u0026#39;${json[\u0026#34;name\u0026#34;][\u0026#34;last\u0026#34;]}\u0026#39;, phoneNumber = json[\u0026#34;phone\u0026#34;], imageUrl = json[\u0026#34;picture\u0026#34;][\u0026#34;thumbnail\u0026#34;]; } In the code snippet above, we created a new person object that we receive from our API. As you probably already have seen, we have to write all the key strings into the class and pollute our class with API information. Additionally, we come into the trap that if we want to add or remove an attribute, we have to change it all over.\nThat makes the maintainability pretty hard. Especially if the API changes and we have to create it from scratch. That would lead to a lot of searches and replacements, and we will lose all IDE supports.\nBenefits No boilerplate surrounding the solution\nThere is no setup required, so you can start directly accessing the parameters\nDisadvantages You have to write every line yourself\nTypos can happen and reduce the stability of your application\nFor every new Field that you want to add, delete or modify we have to modify the code in the model\nHigher maintenance costs especially for larger projects or with changing APIÂ´s\nGenerated Serialization Now that we understand the issues with self-written serialisation letâs have a look at generated Flutter JSON Serialization. There is at the moment not a built-in solution in the Flutter framework, but there are plenty of perfect packages on pub.dev for this problem. In this article, we will have a closer look at the json_serializable package.\nThe package works powerfully with the build_runner package and allows us to generate the âfromJSONâ and âtoJSONâ functions, without writing all keys of the JSON. We only have to set up our models correctly, annotate them accurately and provide two functions inside. But enough of the words, we want to see some code.\nDependencies Before we can begin to work with the json_serializable package, we have to add first some dependencies into our project.\ndependencies: flutter: sdk: flutter cupertino_icons: ^0.1.3 http: ^0.12.0+4 json_annotation: ^3.0.1 dev_dependencies: flutter_test: sdk: flutter build_runner: ^1.8.1 json_serializable: ^3.3.0 The json_annotation is the only dependency that actually has to be inside of our project. The build_runner and json_serializable are just development dependencies and will not be part of the final bundle.\nModify the model part \u0026#39;person_model.g.dart\u0026#39;; @JsonSerializable() class PersonModel { NameModel name; String phone; String email; PictureModel picture; PersonModel({this.name, this.phone, this.email, this.picture}); factory PersonModel.fromJson(Map\u0026lt;String, dynamic\u0026gt; json) =\u0026gt; _$PersonModelFromJson(json); Map\u0026lt;String, dynamic\u0026gt; toJson() =\u0026gt; _$PersonModelToJson(this); } Line 1: With the part person_model.g.dart we give the PersonModel class the possibility to access the methods inside the person_model.g.dart file. The file will be generated later from the built_runner.\nLine 3: The @JsonSerializable() annotation tells the build_runner that this class has to be concerned for the generation of a new file and creation of a serialization.\nLine 5 + 8: For objects inside our JSON we have to create their representing Model classes for NameModel and PictureModel. The new models will also be annotated with @JsonSerializable() and will also get the two new methods from line 12 and 14.\nLine 12: The new factory constructor fromJson is close to our old method. But instead of creating a new Instance of the PersonModel, we call a method _$PersonModelFromJson(json). This method will be generated later with the help of built_runner.\nLine 14: The toJson method returns as expected a Json (in Dart a Map between String and dynamic). To receive the map we call the generated function _$PersonModelToJson(this), and pass the current instance inside.\nUnleash the power of the built_runner After we have successfully created our model with the necessary annotations and functions, we are ready to go for the built_runner script. We open our project in the terminal and execute one of the following commands.\n// Inside of Flutter projects // Generates the generate files once flutter pub run build_runner build // Watches the model files and generates on each change flutter pub run build_runner watch // Inside of Dart projects // Generates the generate files once pub run build_runner build // Watches the model files and generates on each change pub run build_runner watch For the case that you have a regular dart project, I also added the commands for the consistent Dart packages creation. This command will create for you the additional *.g.dart files. These files can be inserted into .gitignore, as everyone in the team can execute this command.\nLet us have a more in-depth look into the generated file from the serialisation. Here you can see the two functions that we call in the fromJson and toJson of the partial class.\n// GENERATED CODE - DO NOT MODIFY BY HAND part of \u0026#39;person_model.dart\u0026#39;; // ************************************************************************** // JsonSerializableGenerator // ************************************************************************** PersonModel _$PersonModelFromJson(Map\u0026lt;String, dynamic\u0026gt; json) { return PersonModel( name: json[\u0026#39;name\u0026#39;] == null ? null : NameModel.fromJson(json[\u0026#39;name\u0026#39;] as Map\u0026lt;String, dynamic\u0026gt;), phone: json[\u0026#39;phone\u0026#39;] as String, email: json[\u0026#39;email\u0026#39;] as String, picture: json[\u0026#39;picture\u0026#39;] == null ? null : PictureModel.fromJson(json[\u0026#39;picture\u0026#39;] as Map\u0026lt;String, dynamic\u0026gt;), ); } Map\u0026lt;String, dynamic\u0026gt; _$PersonModelToJson(PersonModel instance) =\u0026gt; \u0026lt;String, dynamic\u0026gt;{ \u0026#39;name\u0026#39;: instance.name, \u0026#39;phone\u0026#39;: instance.phone, \u0026#39;email\u0026#39;: instance.email, \u0026#39;picture\u0026#39;: instance.picture, }; Here are all the strings that we had to create beforehand inside of these methods. Thanks to built_runner they getting now generated for us. If you take a look at line 18, you can see that even the child models are generated correctly. If we now change something in our class and execute once more the build runner (or let it watch), then we will see how it gets added to the list automatically.\nBenefits Modifications to the class are instantaneously reflected\nLower maintenance due to less written code\nTypes are directly set via the attributes\nNo magic happens, the generated files are in the project\nDisadvantages Initial setup is increased\nThere is some boilerplate involved\nYou have to make sure everyone on the team is aware of the build_runner function (possible solution would be a script or a good readme.md file)\nGenerated files could distract from the real model files\nPackages for Flutter JSON Serialization There are several other packages that you can use for generated JSON Serialization.\nbuilt_value / built_collection The built_value or built_collection can handle JSON Serialization in a very similar way as we did in json_serializable. But add beneficial functions like immutability, comparability and other quality of life functions.\ndart_json The dart_json has the benefit that it is absolutely dependency less. If you search for a solution with as few dependencies as possible this package is your best bet.\nJSON Web parser There is some JSON Web parser that creates out of your JSON a valid dart model for you. You can copy a JSON into the left side and copy the model on the right side into your application.\nConclusion JSON Serialization is a crucial topic, primarily if you work with a lot of external requests and different APIÂ´s that are changing their contracts from time to time. These should lead to more productivity so that we can implement significant features easier.\nI made a poll on twitter to see which framework is the most used at the moment, but it seems it is pretty close together. My recommendation is to take a look at each package/solution and then use which one fits your needs best.\nThank you for reading and stay curious.\n","permalink":"https://flutter-explained.dev/posts/step-by-step-guide-for-flutter-json-serialization/","summary":"\u003ch2 id=\"general-serialization\"\u003eGeneral Serialization\u003c/h2\u003e\n\u003cp\u003eSerialization is the process in computer science to convert an object into\nsomething that can be saved in a database or be sent via a network request.\nToday we want to transform a JSON String that we receive from an API and\ntransform it into an instance of an object.\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"//images.ctfassets.net/573xlmlwok2s/2p9fcF4vve0tZxeapdoo4Y/ff9f5d2374bc5be78c16976d1ea64620/json_to_instance.webp\" alt=\"JSON to\ninstance\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"//images.ctfassets.net/573xlmlwok2s/6Gmfe859w9cYMUIfMwkaED/3832f942d09c97a5a5e138ce699cfe09/string-to-person.webp\" alt=\"JSON string to\nperson\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003eTo get our Person information as a String, I will work in the following\nexample with the Random User Generator. This can generate random user\ninformation and provides us with an API to receive a JSON String.\u003c/p\u003e","title":"Step-by-Step guide for Flutter JSON Serialization"},{"content":"","permalink":"https://flutter-explained.dev/posts/flutter-navigation-everything-you-need-to-know/","summary":"","title":"Flutter Navigation â Everything you need to know"},{"content":"","permalink":"https://flutter-explained.dev/posts/setup-a-flutter-web-project-on-github-pages/","summary":"","title":"Setup a Flutter Web Project on GitHub Pages"},{"content":"","permalink":"https://flutter-explained.dev/posts/how-i-started-with-flutter/","summary":"","title":"How I started with Flutter"},{"content":"","permalink":"https://flutter-explained.dev/posts/flutter-project-scrum-poker-app/","summary":"","title":"Flutter Project - Scrum Poker App"},{"content":"Pen \u0026amp; Paper: My best friends before starting to code To be honest with you, I had no idea what I should code at first! So I started to google and figured out how I should begin and process my task to be successful. One of the best articles that I found was Learning by Cloning: How to Decompose the Problem, from Jim Medlock. After I read it, I tried to follow the instruction in step three and decompose my original website.\nAt first, I opened the original website and tried to understand the structure of the website. Unfortunately, the design of the website has been changed since I created this blog but I hope you can see the design in the image below as well. I start to markup the site and break it down into small components and pieces according to the content and the responsibility of each piece. This is how it looks like:\nEach piece has an individual task. 1. Navbar is responsible for the menu and the navigation between main pages of the website 2. Mega menu is also a menu component, which is much more complicated. It extended dropdown and contains different categories. 3. Wrapper for content represents the main content of the page, and this consists of four sub-components. 4. Footer contains social media links, copyright and some other information.\nAfter I finished analysing the website, I grabbed a pen and paper. This is the easiest way for me to bring everything on paper, which Iâm going to code later. I generally create a sketch of the website with the boxes that I created in my last step. Now itâs time to think about HTML tags, that Iâm going to use in my code.\nBelow you can see my sketch on the paper with components and their possible HTML tags.\nChallenges while creating my first sketch for clone a website As soon as I had a clear plan and knew what I should do and where I should start, everything is much easier and make more sense.\n\u0026ldquo;Before wasting time and start coding without any plan, take a moment to understand the problem. After that, create a plan, and the last part is starting to code.\u0026rdquo;\nI think the essential part of every programming problem or in this case cloning a website is at first to understand the problem. As soon as we understand and analyse the problem, we have done more than 50% of the task. Also, it will help us to solve the rest much more straightforward.\n\u0026ldquo;Stop trying to be a perfectionist \u0026amp; Believe in your sketch and your solution\u0026rdquo;\nAfter my first sketch, I started to improve it again and again, which was more time-consuming rather than helpful. I forgot the purpose of my drawing, which was to have a rough plan where and how I should start. I needed my sketch to consider it as the base structure of my code and not to have a beautiful and best draft for the website. So before you make the same mistake as I, jump to the next step. You will always have the chance to make it better or even change your structure if itâs necessary.\nImplement the sketch into code The requirement for my Chingu project was to clone the website using HTML, CSS and JavaScript. Therefore, I opened my IDE and created an HTML5 boilerplate and start to code. But if you want to use any other technical stack or framework, donât wait longer. Create your boilerplate and kick off your project as soon as possible.\nTo implement my sketch into code, I started at first to bring each block in my draft as a div in my code. It means at the end I had four divs, and I marked them with different class names. So I prevent to forget what the purpose of each block should be.\n\u0026lt;div class=\u0026#34;menu-container\u0026#34;\u0026gt; \u0026lt;nav class=\u0026#34;navbar\u0026#34;\u0026gt;\u0026lt;/nav\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;dropdown-navbar\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;wrapper\u0026#34;\u0026gt; \u0026lt;section class=\u0026#34;header-section\u0026#34;\u0026gt;\u0026lt;/section\u0026gt; \u0026lt;section class=\u0026#34;general-text\u0026#34;\u0026gt;\u0026lt;/section\u0026gt; \u0026lt;section class=\u0026#34;first-section\u0026#34;\u0026gt;\u0026lt;/section\u0026gt; \u0026lt;section class=\u0026#34;second-section\u0026#34;\u0026gt;\u0026lt;/section\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;footer\u0026#34;\u0026gt; \u0026lt;ul class=\u0026#34;horizontal-list\u0026#34;\u0026gt;\u0026lt;/ul\u0026gt; \u0026lt;div class=\u0026#34;social-media-list\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;p class=\u0026#34;footer-text\u0026#34;\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;footer-text\u0026#34;\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; After that, I had a basement for my code, and I could dig more in each block to expand it. I started with each div to code in details and complete it as same as in the original website.\nWrapping it up Cloning a website sounds pretty straightforward. But it can be tough and frustrating if you donât have any plan for how you want to start and implement it.\nSteps to create a website sketch:\nOpen the original website - Analyse the website base on structure and task of each part and break it down to small pieces - Create a sketch of a website on a paper - Decide for HTML tags - Donât try to improve your sketch over and over - Implement your sketch into code - These steps helped me to go through this challenge and complete it successfully. Hopefully, it will also help you and make this challenge for you easier. If you have any other idea and would like to share them with me, I would be more than happy to hear from you.\nHere you can have a look at the original website. This is the live version of my cloned website and if you like to know more about my source code, check it here on my GitHub.\n","permalink":"https://flutter-explained.dev/posts/clone-a-website-from-scratch/","summary":"\u003ch2 id=\"pen--paper-my-best-friends-before-starting-to-code\"\u003ePen \u0026amp; Paper: My best friends before starting to code\u003c/h2\u003e\n\u003cp\u003eTo be honest with you, I had no idea what I should code at first! So I started\nto google and figured out how I should begin and process my task to be\nsuccessful. One of the best articles that I found was \u003ca href=\"https://medium.com/chingu/learning-by-cloning-how-to-decompose-the-problem-102f838a3b19\"\u003eLearning by Cloning:\nHow to Decompose the\nProblem\u003c/a\u003e,\nfrom \u003ca href=\"https://medium.com/@jdmedlock\"\u003eJim Medlock\u003c/a\u003e. After I read it, I tried to\nfollow the instruction in step three and decompose my original website.\u003c/p\u003e","title":"Clone a Website From Scratch"},{"content":"","permalink":"https://flutter-explained.dev/posts/github-actions-for-a-flutter-developer/","summary":"","title":"GitHub Actions - For a Flutter Developer"},{"content":"","permalink":"https://flutter-explained.dev/posts/flutter-journal-app-full-project-with-chingu/","summary":"","title":"Flutter Journal App - Full Project with Chingu"},{"content":"","permalink":"https://flutter-explained.dev/posts/six-weeks-with-chingu-to-feel-like-a-software-developer/","summary":"","title":"Six Weeks with Chingu to feel like a Software Developer"},{"content":"","permalink":"https://flutter-explained.dev/posts/i-go-on-a-chingu-journey-with-flutter-dart-and-aqueduct/","summary":"","title":"I go on a Chingu Journey, with Flutter, Dart and Aqueduct"},{"content":"","permalink":"https://flutter-explained.dev/posts/2v2vc0idntrgvhaainv1k/","summary":"","title":""}]